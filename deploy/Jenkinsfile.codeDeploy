pipeline {
    agent any

    environment {
        REGION = "ap-northeast-2"
        ECR_REPOSITORY = "182024812696.dkr.ecr.${env.REGION}.amazonaws.com/todolist-repository"

        ECS_CLUSTER = "todolist-cluster-codedeploy"
        ECS_SERVICE = "todolist-container"
        ECS_TASK_DEF = "todolist-codedeploy-family"

        AWS_CREDENTIALS = "aws_credentials"
    }

    stages {
        stage('Push ECR') {
            steps {
                dir("apiserver") {
                    script {
                        sh "docker build -t build-${env.BUILD_ID} ."
                        sh "docker tag build-${env.BUILD_ID} ${env.ECR_REPOSITORY}:build-${env.BUILD_ID}"
                    }
                }
            }
        }

        stage("Register ECS") {
            steps {
                dir("deploy") {
                    script {
                        def searchString = "&&BUILD_ID&&"
                        def pipelineScriptPath = "task-definition.json"
                        
                        // Read to Json file
                        def pipelineScriptContent = readFile(file: pipelineScriptPath)

                        // Replace the string
                        def updatedPipelineScript = pipelineScriptContent.replace(searchString, env.BUILD_ID)
                        writeFile(file: pipelineScriptPath, text: updatedPipelineScript)

                        docker.withRegistry("https://${env.ECR_REPOSITORY}:build-${env.BUILD_ID}", "ecr:${env.REGION}:${env.AWS_CREDENTIALS}") {
                            docker.image("${env.ECR_REPOSITORY}:build-${env.BUILD_ID}").push()
                        }
                    }
                }
            }
        }

        stage("Deploy ECS via CodeDeploy") {
            steps {
                dir("deploy") {
                    script {
                        withAWS(credentials: "${env.AWS_CREDENTIALS}", region: "${env.REGION}") {
                            def revision = sh(returnStdout: true, script: "aws ecs register-task-definition --cli-input-json file://task-definition.json | jq -r '.taskDefinition.revision'").trim()

                            echo "${revigion}"

                            // sh "aws deploy create-deployment --application-name YourCodeDeployApplicationName --deployment-group-name YourDeploymentGroupName --revision revisionType=AppSpecContent,value=\"$(cat appspec.yml)\""
                        }
                    }
                }
            }
        }
    }
}

pipeline {
    agent any

    environment {
        // codeDeploy
        CD_APP = "todolist-codeDeploy"
        CD_GROUP_NAME ="bluegreen-deploy"

        // ECR
        REGION = "ap-northeast-2"
        ECR_REPOSITORY = "182024812696.dkr.ecr.${env.REGION}.amazonaws.com/todolist-repository"

        // ECS
        ECS_CLUSTER = "todolist-cluster-codedeploy"
        ECS_SERVICE = "todolist-container"
        ECS_TASK_DEF = "todolist-codedeploy-family"

        AWS_CREDENTIALS = "aws_credentials"
    }

    stages {
        stage('Push ECR') {
            steps {
                dir("apiserver") {
                    script {
                        sh "docker build -t build-${env.BUILD_ID} ."
                        sh "docker tag build-${env.BUILD_ID} ${env.ECR_REPOSITORY}:build-${env.BUILD_ID}"
                    }
                }
            }
        }

        stage("Register ECS") {
            steps {
                dir("deploy") {
                    script {
                        def searchString = "&&BUILD_ID&&"
                        def pipelineScriptPath = "task-definition.json"
                        
                        // Read to Json file
                        def pipelineScriptContent = readFile(file: pipelineScriptPath)

                        // Replace the string
                        def updatedPipelineScript = pipelineScriptContent.replace(searchString, env.BUILD_ID)
                        writeFile(file: pipelineScriptPath, text: updatedPipelineScript)

                        docker.withRegistry("https://${env.ECR_REPOSITORY}:build-${env.BUILD_ID}", "ecr:${env.REGION}:${env.AWS_CREDENTIALS}") {
                            docker.image("${env.ECR_REPOSITORY}:build-${env.BUILD_ID}").push()
                        }
                    }
                }
            }
        }

        stage("Deploy ECS via CodeDeploy") {
            steps {
                dir("deploy") {
                    script {
                        withAWS(credentials: "${env.AWS_CREDENTIALS}", region: "${env.REGION}") {

                            // def revision = sh(returnStdout: true, script: "aws ecs register-task-definition --cli-input-json file://task-definition.json | jq -r '.taskDefinition.taskDefinitionArn'").trim()

                            def output = sh(returnStdout: true, script: "aws ecs register-task-definition --cli-input-json file://task-definition.json | jq -r '.taskDefinition.taskDefinitionArn, .taskDefinition.containerDefinitions[0].name, .taskDefinition.containerDefinitions[0].portMappings[0].containerPort'").trim()
                            def lines = output.split("\n")

                            echo "CodeDeploy >> ${lines}"

                            def taskDef = lines[0]
                            def containerName = lines[1]
                            def containerPort = lines[2]

                            // Read and modify appspec.yml
                            def specFile = "appspec.yml"
                            def content = readFile(file: specFile)
                            content = content.replace("&&CD_APP&&", env.CD_APP)
                            content = content.replace("&&CD_GROUP_NAME&&", env.CD_GROUP_NAME)
                            content = content.replace("&&TASK_DEF&&", taskDef)
                            content = content.replace("&&CONTAINER_NAME&&", containerName)
                            content = content.replace("&&CONTAINER_PORT&&", containerPort)
                            writeFile(file: specFile, text: content)

                            sh """
                                cat appspec.yml
                                aws deploy create-deployment --application-name ${env.CD_APP} --deployment-group-name ${env.CD_GROUP_NAME} --revision revisionType=AppSpecContent,value="\$(cat appspec.yml)\"
                            """
                        }
                    }
                }
            }
        }
    }
}
